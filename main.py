import os
import logging
import pytz
import gspread
from datetime import datetime
from google.oauth2.service_account import Credentials
from apscheduler.schedulers.background import BackgroundScheduler
from telegram import Bot
from telegram.ext import Application

# –õ–æ–≥–∏
logging.basicConfig(
    format="%(asctime)s [%(levelname)s] %(message)s",
    level=logging.INFO
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")  # ID —á–∞—Ç–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
SHEET_NAME = os.getenv("SHEET_NAME", "–õ–∏—Å—Ç1")

MORNING_HOUR = int(os.getenv("MORNING_HOUR", 9))
MORNING_MINUTE = int(os.getenv("MORNING_MINUTE", 0))
EVENING_HOUR = int(os.getenv("EVENING_HOUR", 18))
EVENING_MINUTE = int(os.getenv("EVENING_MINUTE", 0))

tz = pytz.timezone("Europe/Moscow")

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets
def open_sheet():
    scopes = ["https://www.googleapis.com/auth/spreadsheets"]
    creds = Credentials.from_service_account_file("service_account.json", scopes=scopes)
    gc = gspread.authorize(creds)
    sh = gc.open_by_key(SPREADSHEET_ID)
    return sh.worksheet(SHEET_NAME)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–Ω—è—Ç–∏—è
def has_lessons_today():
    try:
        ws = open_sheet()
        today = datetime.now(tz).strftime("%d.%m.%Y")
        records = ws.get_all_records()
        for row in records:
            if str(row.get("–î–∞—Ç–∞")).strip() == today and row.get("–ó–∞–Ω—è—Ç–∏–µ"):
                return True
        return False
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–Ω—è—Ç–∏–π: {e}")
        return False

# –°–æ–æ–±—â–µ–Ω–∏—è
async def send_morning_message(app: Application):
    try:
        if has_lessons_today():
            await app.bot.send_message(chat_id=CHAT_ID, text="üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –°–µ–≥–æ–¥–Ω—è –µ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è.")
            logging.info("–£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            logging.info("–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç, —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def send_evening_message(app: Application):
    try:
        if has_lessons_today():
            await app.bot.send_message(chat_id=CHAT_ID, text="üåô –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–Ω—è—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è!")
            logging.info("–í–µ—á–µ—Ä–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            logging.info("–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç, –≤–µ—á–µ—Ä–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
def schedule_jobs(app: Application):
    scheduler = BackgroundScheduler(timezone=tz)

    scheduler.add_job(send_morning_message, "cron",
                      hour=MORNING_HOUR, minute=MORNING_MINUTE,
                      args=[app], id="notify_morning")

    scheduler.add_job(send_evening_message, "cron",
                      hour=EVENING_HOUR, minute=EVENING_MINUTE,
                      args=[app], id="notify_evening")

    scheduler.start()
    logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
def main():
    app = Application.builder().token(BOT_TOKEN).build()
    schedule_jobs(app)

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
